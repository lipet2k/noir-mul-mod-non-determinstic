global NUM_LIMBS : Field = 16;
global NUM_REDUCTION_MODULI : Field = 4;
global NUM_BASE_EXPONENTIATIONS : Field = 31; // ((NUM_LIMBS - 1) * 2) + 1
global NUM_TOTAL_BASE_EXPONENTIATIONS : Field = 124; // NUM_BASE_EXPONENTIATIONS * NUM_REDUCTION_MODULI

struct MulModNonDetermParams {
    base : Field,
    q : [u32; NUM_LIMBS], // Bigint
    m : [Field; NUM_REDUCTION_MODULI],
    q_mod_m : [Field; NUM_REDUCTION_MODULI],
    base_exponentiations : [Field; NUM_TOTAL_BASE_EXPONENTIATIONS], // base^i mod q mod m_i
}

impl MulModNonDetermParams {
    // n^2 * b^2 ~ 2^7 * 2^64 (for 8-limbs of 32-bits each)
    fn rMax(self) -> u96 {
        (NUM_LIMBS as u96 * NUM_LIMBS as u96) * (self.base as u96 * self.base as u96)
    }

    // 2 * n^2 * b^2 ~ 2^1 * 2^7 * 2^64 (for 8-limbs of 32-bits each)
    fn sMax(self) -> u96 {
        2 * (NUM_LIMBS as u96 * NUM_LIMBS as u96) * (self.base as u96 * self.base as u96)
    }

    fn range_checks(self, r : Field, s : [Field; NUM_REDUCTION_MODULI]) {
        let rMax = self.rMax();
        assert(r as u96 < rMax);

        let sMax = self.sMax();
        for i in 0..NUM_REDUCTION_MODULI {
            assert(s[i] as u96 < sMax);
        }
    }
    
}

fn partially_reduced_sum_mod_q(base_exponentiations : [Field; NUM_BASE_EXPONENTIATIONS], x : [Field; NUM_LIMBS]) -> Field {
    let mut result = 0;
    for i in 0..NUM_LIMBS {
        result = result + (base_exponentiations[i] * x[i]);
    };
    result
}

fn partially_reduced_product_mod_q(base_exponentiations : [Field; NUM_BASE_EXPONENTIATIONS], x : [Field; NUM_LIMBS], y : [Field; NUM_LIMBS]) -> Field {
    let mut result = 0;
    for i in 0..NUM_LIMBS {
        for j in 0..NUM_LIMBS {
            result = result + (base_exponentiations[i + j] * (x[i] * y[j]));
        };
    };
    result
}

fn mul_mod_non_deterministic(
    params : MulModNonDetermParams,
    x : [Field; NUM_LIMBS],
    y : [Field; NUM_LIMBS],
    z_mod_q : [Field; NUM_LIMBS],
    r : Field,
    s : [Field; NUM_REDUCTION_MODULI],
) {
    // small-moduli checks
    for i in 0..NUM_REDUCTION_MODULI {
        let mut base_exponentiations = [0 as Field; NUM_BASE_EXPONENTIATIONS];
        for j in 0..NUM_BASE_EXPONENTIATIONS {
            base_exponentiations[j] = params.base_exponentiations[(i * NUM_BASE_EXPONENTIATIONS) + j];
        };
        let product = partially_reduced_product_mod_q(base_exponentiations, x, y);
        let sum = partially_reduced_sum_mod_q(base_exponentiations, z_mod_q);
        assert(product - sum - (r * params.q_mod_m[i]) == s[i] * params.m[i]);
    };
    
    // parameter range checks
    params.range_checks(r, s);
}

fn mul_mod_non_deterministic_params() -> MulModNonDetermParams {
    // Note the following params are particular to 256-bit bigints consisting of 8 32-bit limbs
MulModNonDetermParams {
base: 4294967296,
q: [2120737119, 3835765520, 1247917192, 4063554719, 3404853836, 2034617875, 778375102, 1210251488, 1917225331, 3795467724, 1773158024, 6080413, 1698189993, 1160700478, 1205258352, 2280544710],
m: [74684543326020202269309830312831319757532706564253, 33691779876666245027903078753942696838547278695717, 20598741005597686126931828390945874928273828922699, 94853440291242852401182618564733101294907538620699],
q_mod_m: [39719532833015227503403773235847831369802684178757, 5716520618135105099013046304085661147219202806264, 10127990886556655550010410616813037925279969660326, 62534209547219981918273993901053837440586439798151],
base_exponentiations: [1, 4294967296, 18446744073709551616, 79228162514264337593543950336, 340282366920938463463374607431768211456, 1461501637330902918203684832716283019655932542976, 2274496295383573865869435835532015986479559261284, 15522770988400466710860463012942010660887517447582, 72864431109523659071483961257171501383002751954384, 44228297562522669407929203211818977436828695747195, 27712866960194591506081301593232204379727897748672, 22325855724398858340826248565011464755964330498704, 29018195528903104153230197695386512579494787662009, 41877197867258507749635023440745980436710838238251, 3291914437473442224642224190017067482330087106931, 43743603177558125347775546468577940065278294792947, 35533748070514978331720850524829620461468636987340, 73283594196789518174837642566529647282394586189758, 70855735583217368516233249649476168530699988187229, 62189706469652931102933762537918629493867855132881, 61872890716077448245285389554166481008042237051705, 33557682492198817988981358678565308822679369135751, 49186865364924209572365171587222539508921390027929, 2374806447894921162917382399821462357895454633821, 27215674625324534274701815654122857600831964623866, 1334737933767795779670712304901029054748344963891, 5521679734644305131551603126247731479481518234242, 62287152471625250459505005715212181044505785120274, 22383366345755281692631291260954325139731843792724, 23240876280625336981368204225820453948760924726885, 54281156988242479651554586201862546336279029599961, 1, 4294967296, 18446744073709551616, 79228162514264337593543950336, 340282366920938463463374607431768211456, 1461501637330902918203684832716283019655932542976, 6502962209181383232919812930675618916501986791149, 23582814056684018664724735899002473204551055612842, 22099268981174335216774013316126070556939256084240, 25103711590738488963716214526725050094724626327381, 19306430615806308276091776188156318675216221193043, 3053234168768099920001893378474607520804261501767, 25012614198370545213713306375544340048149479117055, 13310145824314349390135905268397392288211549211074, 7081236514477210241896309315800465998317685415331, 18277650097610202630370036020470399281436046339009, 2517164564336145897770205471882443959426062862667, 13610845894990591072587426823877834472127415509289, 11475770831063418129959079675792913887034765828327, 22438107631143591809235865507382283371237379587560, 10954386983058140133630608836807343198448354022605, 12719757702391259032041150965634694387018436503734, 14494564566626854848850076803309775293384765478612, 31227022857495697773048617773344447380908024903523, 6942013852534115109635928896134807883979276928734, 29237187797321143667058877857825416541670753370910, 33325151665715880143576081764824805341239561469520, 18596173017940022157977215692961618317853332593983, 21958296167414511239869361138263024344433394444327, 31190900950946907794868136715389948301478783384015, 21448852066624927601317412301386106017019101391844, 1, 4294967296, 18446744073709551616, 79228162514264337593543950336, 340282366920938463463374607431768211456, 1461501637330902918203684832716283019655932542976, 11646584995697761414429430773697136527043446035196, 16637563348377999212355125000304225647999596809774, 7916828127389153996413582620058652679061050364098, 18612380935358970378210636918003624085547103085257, 19505510727851617446222642301111545778391519372976, 9298487238257478306552608863923097334855079620990, 12350093667396874364733181252157039183812556750220, 16279221085306733746516928267255168677140287455169, 11444774621505130988145354944160456915448018923398, 2996130808824009361907274715575987346075208834632, 6211582995856789866473661995525028664255608596498, 7037282871230784271369211829080317941449203907810, 5255196713555393786384857248413757078054081145243, 14263602998099254922888602827409831181022215144657, 15608679343386780215677792639486121302813232281172, 15883516213110472699898555856688307147429628099344, 13271504830487464191781230522054144915646583618767, 5347091231704542301500307479306901301817072681908, 8252300143718758698446036077354890629386681054712, 6551645506912126322825931849094778043618963028486, 7823891273114068975904601330579273915992099935751, 16258604052151232096827589180555345188108794178926, 10112351112223857972844584596755795350348709674057, 13509065407122538555473116477528485645159042000658, 15534720615977767848939879234241810902197572891527, 1, 4294967296, 18446744073709551616, 79228162514264337593543950336, 340282366920938463463374607431768211456, 1461501637330902918203684832716283019655932542976, 34956026789396292254207345811140656087107907136144, 9021200270220851946668982990229941136082577423814, 92427879328881764915797272227801359050960043029826, 58990936543885074320256557144014988354870482144801, 58130644729788378865854979222232263283505101383391, 33078713149825768217790977663790073376931519313486, 79310197787793962807117339603891906822339849848614, 66343283183448171661898134026293717798467337247842, 25320910508847260026646987710609599241057589294756, 37294038284008800201271694452968438117165957054643, 63141056332989458047307693879563611953650007707413, 62546567771758748017028601032519942941065317153862, 69345273082592918767718202566166108130097212421743, 6572783856580834930717329810803009919539565530323, 22001832542366364644370479364517696473878577162190, 82607261332864210220330069174889538209500953474674, 77613161760784939911586661569106663187300973969280, 42323518444302154147664558679448978457817645328790, 79820721056155938215846834306647653587180525718634, 52284727027250913469315495121065437466583938374328, 6845131074010923462005450943248550477871566638027, 3665545112077895354675628990352981024941211802178, 11490845753577103354485352301973609396251575125554, 17628868283395327441243478053533599522987802504577, 19273509615324204377399112784484495852370387215418],
}
}

fn main(
    x : [Field; NUM_LIMBS],
    y : [Field; NUM_LIMBS],
    z_mod_q : [Field; NUM_LIMBS],
    r : Field,
    s : [Field; NUM_REDUCTION_MODULI],
) {
    let params = mul_mod_non_deterministic_params();
    mul_mod_non_deterministic(
        params,
        x,
        y,
        z_mod_q,
        r,
        s,
    );
}

// // partially_reduced_sum_mod_q
// #[test]
// fn test_partially_reduced_sum_mod_q_case1() {
//     let base_exponentiations = [1, 46686251, 2591258, 21185481, 34901722, 9764953, 10249013, 980199, 38, 24785343, 48488027, 5371846, 26791234, 21209775, 39604055];
//     let x=[4104057479,1317660176,3369491359,1574675528,718719913,3448263837,3220071330,1040409407];
//     let expected_sum = 196387155814770375;
//     let sum = partially_reduced_sum_mod_q(base_exponentiations, x);
//     assert(sum == expected_sum);
// }

// // partially_reduced_product_mod_q
// #[test]
// fn test_partially_reduced_product_mod_q_case1() {
//     let base_exponentiations = [1, 46686251, 2591258, 21185481, 34901722, 9764953, 10249013, 980199, 38, 24785343, 48488027, 5371846, 26791234, 21209775, 39604055];
//     let x=[3320379920,1938147428,1942509796,1795943184,24853,0,0,0];
//     let y=[2912727897,3590519536,1687587470,3896107618,1092831095,0,0,0];
//     let expected_product = 2418553383339735974797683108;
//     let product = partially_reduced_product_mod_q(base_exponentiations, x, y);
//     assert(product == expected_product);
// }

// range_checks
#[test]
fn test_range_checks_case1() {
    let params = MulModNonDetermParams {
        base: 10,
        q: [9; NUM_LIMBS],
        m: [2; NUM_REDUCTION_MODULI],
        q_mod_m: [1; NUM_REDUCTION_MODULI],
        base_exponentiations: [1; NUM_TOTAL_BASE_EXPONENTIATIONS],
    };
    let r : Field = 6399;
    let s : [Field; NUM_REDUCTION_MODULI] = [12799; NUM_REDUCTION_MODULI];

    // TODO: Range check failure threshold
    // let r : Field = 6400;
    // let s : [Field; NUM_REDUCTION_MODULI] = [12800; NUM_REDUCTION_MODULI];
    
    params.range_checks(r, s);
}